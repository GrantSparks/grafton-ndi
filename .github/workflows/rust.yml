name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  NDI_SDK_DIR: C:\Program Files\NDI\NDI 6 SDK
  NDI_SDK_VERSION: "6.1"
  NDI_SDK_INSTALLER: NDI_6_SDK.exe

jobs:
  setup:
    name: Setup NDI SDK
    runs-on: windows-latest
    steps:
      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

  test:
    name: Test
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

      - name: Set Environment Variables (Windows)
        run: |
          echo "$env:NDI_SDK_DIR\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --verbose
        env:
          TMPDIR: ${{ runner.temp }}

  format:
    name: Format
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

      - name: Set Environment Variables (Windows)
        run: |
          echo "$env:NDI_SDK_DIR\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Check formatting
        run: cargo fmt --all -- --check

  lint:
    name: Lint
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

      - name: Set Environment Variables (Windows)
        run: |
          echo "$env:NDI_SDK_DIR\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Run Clippy
        run: cargo clippy -- -D warnings

  semver:
    name: Check semver
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

      - name: Set Environment Variables (Windows)
        run: |
          echo "$env:NDI_SDK_DIR\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: obi1kenobi/cargo-semver-checks-action@v2

  publish:
    name: Publish
    needs: [test, format, lint, semver]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Cache NDI SDK
        id: cache-ndi
        uses: actions/cache@v4
        with:
          path: ${{ env.NDI_SDK_DIR }}
          key: ndi-sdk-${{ env.NDI_SDK_VERSION }}-windows

      - name: Download and Install NDI SDK (if not cached)
        if: steps.cache-ndi.outputs.cache-hit != 'true'
        run: |
          curl -L -o ${{ env.NDI_SDK_INSTALLER }} "https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe"
          Start-Process -FilePath "${{ env.NDI_SDK_INSTALLER }}" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=$env:NDI_SDK_DIR" -Wait
          Remove-Item ${{ env.NDI_SDK_INSTALLER }}
        shell: pwsh

      - name: Set Environment Variables (Windows)
        run: |
          echo "$env:NDI_SDK_DIR\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}