name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  setup:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      NDI_SDK_DIR: ${{ steps.set-env.outputs.NDI_SDK_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install LLVM for bindgen (Windows)
        run: choco install llvm

      - name: Download NDI SDK Library Installer (Windows)
        run: curl -L -o NDI_6_SDK.zip ${{ secrets.NDI_SDK_ZIP_URL }}

      - name: Install NDI SDK Library (Windows)
        run: |
          Expand-Archive -Path '.\NDI_6_SDK.zip' -DestinationPath 'C:\NDI\NDI 6 SDK'
          echo "NDI_SDK_DIR=C:\NDI\NDI 6 SDK" >> $GITHUB_ENV

  test:
    name: Test
    runs-on: windows-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "%NDI_SDK_DIR%\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --verbose
        env:
          TMPDIR: ${{ runner.temp }}

  format:
    name: Format
    runs-on: windows-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "%NDI_SDK_DIR%\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  lint:
    name: Lint
    runs-on: windows-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "%NDI_SDK_DIR%\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run Clippy
        run: cargo clippy -- -D warnings

  semver:
    name: Check semver
    runs-on: windows-latest
    needs: setup
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "%NDI_SDK_DIR%\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: obi1kenobi/cargo-semver-checks-action@v2

  publish:
    name: Publish
    runs-on: windows-latest
    needs: [test, format, lint, semver]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "%NDI_SDK_DIR%\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
