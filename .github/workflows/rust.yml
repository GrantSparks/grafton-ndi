name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  NDI_SDK_URL: ${{ secrets.NDI_SDK_URL || 'https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe' }}
  LLVM_VERSION: "18.1.8"
  CACHE_VERSION: v1

jobs:
  # Quick format check (no dependencies needed)
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Combined setup and test job
  test-and-lint:
    name: Test & Lint
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Setup NDI SDK and LLVM (only this job saves cache)
      - uses: ./.github/actions/setup-ndi-windows
        with:
          save-cache: 'true'

      # Setup Rust
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      # Rust caching with optimizations
      - uses: Swatinem/rust-cache@v2
        with:
          # Don't cache the entire target directory, just dependencies
          cache-targets: false
          # Use a shared cache key to avoid saving the same dependencies multiple times
          shared-key: "rust-cache-windows"
          # Only save cache on main branch to avoid cache thrashing
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # Run all checks
      - name: Run tests
        run: |
          # Run unit tests and doc tests, but exclude integration tests that require NDI runtime
          # Integration tests (tests/*.rs) require NDI runtime DLLs which aren't available in CI
          # The NDI SDK provides headers/libs for building but not the runtime DLLs
          # TODO: Consider adding NDI runtime to CI or mocking it for integration tests
          cargo test --lib --verbose
          cargo test --doc --verbose
        env:
          TMPDIR: ${{ runner.temp }}

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Build examples
        run: cargo build --examples

  # Semver check runs on Windows with same NDI SDK setup
  semver:
    name: Check semver
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Setup NDI SDK and LLVM
      - uses: ./.github/actions/setup-ndi-windows
        with:
          save-cache: 'false'

      - uses: dtolnay/rust-toolchain@stable

      # Rust caching - read-only, don't save
      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
          shared-key: "rust-cache-windows"
          save-if: false  # Let test-and-lint job handle saving

      - uses: obi1kenobi/cargo-semver-checks-action@v2

  # Publish job
  publish:
    name: Publish
    needs: [format, test-and-lint, semver]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Setup NDI SDK and LLVM
      - uses: ./.github/actions/setup-ndi-windows
        with:
          save-cache: 'false'

      - uses: dtolnay/rust-toolchain@stable
      
      # Rust caching - read-only for publish job
      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: false
          shared-key: "rust-cache-windows"
          save-if: false  # Don't save cache in publish job

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}