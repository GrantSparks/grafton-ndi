name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  NDI_SDK_URL: ${{ secrets.NDI_SDK_URL || 'https://downloads.ndi.tv/SDK/NDI_SDK/NDI%206%20SDK.exe' }}
  LLVM_VERSION: "18.1.8"
  CACHE_VERSION: v1

jobs:
  # Quick format check (no dependencies needed)
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Combined setup and test job
  test-and-lint:
    name: Test & Lint
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Generate cache key for all dependencies
      - name: Generate cache key
        id: cache-key
        run: |
          $ndiHash = [System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes("${{ env.NDI_SDK_URL }}"))).Replace("-", "").Substring(0, 16)
          echo "key=deps-${{ env.CACHE_VERSION }}-$ndiHash-${{ env.LLVM_VERSION }}-${{ runner.os }}" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Cache both LLVM and NDI SDK together
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}\ndi-sdk
            C:\Program Files\LLVM
          key: ${{ steps.cache-key.outputs.key }}

      # Install LLVM if not cached
      - name: Install LLVM
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: choco install llvm --version=${{ env.LLVM_VERSION }} -y

      # Install NDI SDK if not cached
      - name: Download and Install NDI SDK
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          $NDI_SDK_DIR = "${{ runner.temp }}\ndi-sdk"
          $NDI_SDK_INSTALLER = "${{ runner.temp }}\NDI_SDK_Installer.exe"
          
          Write-Host "Downloading NDI SDK..."
          curl -L -o "$NDI_SDK_INSTALLER" "${{ env.NDI_SDK_URL }}"
          
          Write-Host "Installing NDI SDK to: $NDI_SDK_DIR"
          $proc = Start-Process -FilePath "$NDI_SDK_INSTALLER" `
            -ArgumentList "/VERYSILENT", "/SP-", "/SUPPRESSMSGBOXES", "/NORESTART", "/NOCANCEL", "/DIR=$NDI_SDK_DIR", "/LOG=$env:TEMP\ndi_install.log" `
            -PassThru
          
          # Wait up to 5 minutes for installation
          if (!$proc.WaitForExit(300000)) {
            $proc | Stop-Process -Force
            if (Test-Path "$NDI_SDK_DIR\include\Processing.NDI.Lib.h") {
              Write-Host "✓ NDI SDK installed (process timed out but files exist)"
            } else {
              Write-Error "NDI SDK installation failed"
              exit 1
            }
          }
          
          Remove-Item "$NDI_SDK_INSTALLER" -ErrorAction SilentlyContinue
          
          # Verify installation
          if (Test-Path "$NDI_SDK_DIR\include\Processing.NDI.Lib.h") {
            Write-Host "✓ NDI SDK installed successfully"
          } else {
            Write-Error "NDI SDK installation failed - header file not found"
            exit 1
          }
        shell: pwsh

      # Setup Rust
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      # Rust caching
      - uses: Swatinem/rust-cache@v2

      # Setup environment
      - name: Setup environment
        run: |
          echo "NDI_SDK_DIR=${{ runner.temp }}\ndi-sdk" >> $env:GITHUB_ENV
          echo "${{ runner.temp }}\ndi-sdk\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      # Run all checks
      - name: Run tests
        run: |
          # Run unit tests and doc tests, but exclude integration tests that require NDI runtime
          # Integration tests (tests/*.rs) require NDI runtime DLLs which aren't available in CI
          # The NDI SDK provides headers/libs for building but not the runtime DLLs
          # TODO: Consider adding NDI runtime to CI or mocking it for integration tests
          cargo test --lib --verbose
          cargo test --doc --verbose
        env:
          TMPDIR: ${{ runner.temp }}

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Build examples
        run: cargo build --examples

  # Semver check (can run on Linux, no NDI needed)
  semver:
    name: Check semver
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: obi1kenobi/cargo-semver-checks-action@v2

  # Publish job
  publish:
    name: Publish
    needs: [format, test-and-lint, semver]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Generate the same cache key
      - name: Generate cache key
        id: cache-key
        run: |
          $ndiHash = [System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes("${{ env.NDI_SDK_URL }}"))).Replace("-", "").Substring(0, 16)
          echo "key=deps-${{ env.CACHE_VERSION }}-$ndiHash-${{ env.LLVM_VERSION }}-${{ runner.os }}" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Restore dependencies from cache
      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}\ndi-sdk
            C:\Program Files\LLVM
          key: ${{ steps.cache-key.outputs.key }}
          fail-on-cache-miss: true

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Setup environment
        run: |
          echo "NDI_SDK_DIR=${{ runner.temp }}\ndi-sdk" >> $env:GITHUB_ENV
          echo "${{ runner.temp }}\ndi-sdk\Bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}