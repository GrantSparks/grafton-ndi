name: 'Setup NDI SDK on Windows'
description: 'Install NDI SDK and LLVM for building grafton-ndi on Windows'
inputs:
  save-cache:
    description: 'Whether to save the cache after installation'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    # Generate cache key for all dependencies
    - name: Generate cache key
      id: cache-key
      run: |
        # Expected SHA256 hash of NDI SDK installer
        $expected = 'B8A200835CC0894242D8012B1C31C625B0582A561D15CE0E5A3987BD68566A32'
        $ndiHash = $expected.Substring(0, 8)  # Use first 8 chars for cache key
        echo "key=deps-${{ env.CACHE_VERSION }}-$ndiHash-${{ env.LLVM_VERSION }}-${{ runner.os }}" >> $env:GITHUB_OUTPUT
        echo "expected_hash=$expected" >> $env:GITHUB_OUTPUT
      shell: pwsh

    # Restore cache if available
    - name: Restore cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ runner.temp }}\ndi-sdk\**\*
          C:\Program Files\LLVM
        key: ${{ steps.cache-key.outputs.key }}

    # Install LLVM if not cached
    - name: Install LLVM
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: choco install llvm --version=${{ env.LLVM_VERSION }} -y
      shell: pwsh

    # Install NDI SDK if not cached
    - name: Download and Install NDI SDK
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        $NDI_SDK_DIR = "${{ runner.temp }}\ndi-sdk"
        $NDI_SDK_INSTALLER = "${{ runner.temp }}\NDI_SDK_Installer.exe"
        
        Write-Host "Downloading NDI SDK..."
        curl -L -o "$NDI_SDK_INSTALLER" "${{ env.NDI_SDK_URL }}"
        
        # Verify SHA256 hash
        Write-Host "Verifying NDI SDK integrity..."
        $expected = '${{ steps.cache-key.outputs.expected_hash }}'
        $actual = (Get-FileHash "$NDI_SDK_INSTALLER" -Algorithm SHA256).Hash
        if ($actual -ne $expected) {
          Write-Error "NDI SDK hash mismatch! Expected: $expected, Got: $actual"
          exit 1
        }
        Write-Host "✓ NDI SDK hash verified"
        
        Write-Host "Installing NDI SDK to: $NDI_SDK_DIR"
        $proc = Start-Process -FilePath "$NDI_SDK_INSTALLER" `
          -ArgumentList "/VERYSILENT", "/SP-", "/SUPPRESSMSGBOXES", "/NORESTART", "/NOCANCEL", "/DIR=$NDI_SDK_DIR", "/LOG=$env:TEMP\ndi_install.log" `
          -PassThru
        
        # Wait up to 5 minutes for installation
        if (!$proc.WaitForExit(300000)) {
          $proc | Stop-Process -Force
          if (Test-Path "$NDI_SDK_DIR\include\Processing.NDI.Lib.h") {
            Write-Host "✓ NDI SDK installed (process timed out but files exist)"
          } else {
            Write-Error "NDI SDK installation timed out"
            exit 1
          }
        } elseif ($proc.ExitCode -ne 0) {
          Write-Error "NDI installer failed with code $($proc.ExitCode)"
          exit 1
        }
        
        Remove-Item "$NDI_SDK_INSTALLER" -ErrorAction SilentlyContinue
        
        # Verify installation
        if (Test-Path "$NDI_SDK_DIR\include\Processing.NDI.Lib.h") {
          Write-Host "✓ NDI SDK installed successfully"
        } else {
          Write-Error "NDI SDK installation failed - header file not found"
          exit 1
        }
      shell: pwsh

    # Setup environment
    - name: Setup environment
      run: |
        "NDI_SDK_DIR=${{ runner.temp }}\ndi-sdk" | Out-File $env:GITHUB_ENV -Append -Encoding utf8
        "${{ runner.temp }}\ndi-sdk\Bin\x64" | Out-File $env:GITHUB_PATH -Append -Encoding utf8
      shell: pwsh

    # Save cache only from test-and-lint job on main branch
    - name: Save cache
      if: inputs.save-cache == 'true' && steps.cache-restore.outputs.cache-hit != 'true' && github.ref == 'refs/heads/main' && github.job == 'test-and-lint'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ runner.temp }}\ndi-sdk\**\*
          C:\Program Files\LLVM
        key: ${{ steps.cache-key.outputs.key }}