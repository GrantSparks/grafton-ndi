name: 'Setup NDI SDK on macOS'
description: 'Install NDI SDK for building grafton-ndi on macOS'
inputs:
  save-cache:
    description: 'Whether to save the cache after installation'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    # Generate cache key for all dependencies
    - name: Generate cache key
      id: cache-key
      run: |
        # Expected SHA256 hash of NDI SDK installer for macOS
        expected='701609952EE081720DDF6E812C50EDE0F606C20F17F81B632608D7CC3579F5C0'
        ndiHash=$(echo $expected | cut -c1-8)  # Use first 8 chars for cache key
        echo "key=deps-${{ env.CACHE_VERSION }}-${ndiHash}-${{ runner.os }}" >> $GITHUB_OUTPUT
        echo "expected_hash=$expected" >> $GITHUB_OUTPUT
      shell: bash

    # Restore cache if available
    - name: Restore cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ runner.temp }}/ndi-sdk
        key: ${{ steps.cache-key.outputs.key }}

    # Install NDI SDK if not cached
    - name: Download and Install NDI SDK
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        NDI_SDK_DIR="${{ runner.temp }}/ndi-sdk"
        NDI_SDK_INSTALLER="${{ runner.temp }}/NDI_SDK_Installer.pkg"
        
        # Use macOS-specific NDI SDK URL with fallback
        NDI_SDK_URL="${{ env.NDI_SDK_URL_MACOS }}"
        if [ -z "$NDI_SDK_URL" ]; then
          NDI_SDK_URL="https://downloads.ndi.tv/SDK/NDI_SDK_Mac/Install_NDI_SDK_v6_Apple.pkg"
        fi
        
        echo "Downloading NDI SDK..."
        curl -L -o "$NDI_SDK_INSTALLER" "$NDI_SDK_URL"
        
        # Verify SHA256 hash
        echo "Verifying NDI SDK integrity..."
        expected='${{ steps.cache-key.outputs.expected_hash }}'
        actual=$(shasum -a 256 "$NDI_SDK_INSTALLER" | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
        expected_upper=$(echo "$expected" | tr '[:lower:]' '[:upper:]')
        if [ "$actual" != "$expected_upper" ]; then
          echo "NDI SDK hash mismatch! Expected: $expected_upper, Got: $actual"
          exit 1
        fi
        echo "✓ NDI SDK hash verified"
        
        echo "Installing NDI SDK..."
        # Use the standard macOS installer command
        # This will install to the default system location
        sudo installer -pkg "$NDI_SDK_INSTALLER" -target / -allowUntrusted || {
          echo "Error: Failed to install NDI SDK package"
          exit 1
        }
        
        rm -f "$NDI_SDK_INSTALLER"
        
        # Debug: List common installation directories
        echo "Checking common NDI installation paths:"
        ls -la /Library/ | grep -i ndi || true
        ls -la /Applications/ | grep -i ndi || true
        ls -la /usr/local/ | grep -i ndi || true
        
        # More specific search for NDI SDK directory
        echo ""
        echo "Searching for NDI SDK directories:"
        find /Library -maxdepth 2 -name "*NDI*" -type d 2>/dev/null || true
        find /Applications -maxdepth 2 -name "*NDI*" -type d 2>/dev/null || true
        
        # Look for NDI SDK in multiple possible locations
        NDI_LOCATIONS=(
          "/Library/NDI SDK for Apple"
          "/Library/NDI SDK for macOS"
          "/Library/Application Support/NDI SDK for Apple"
          "/Applications/NDI SDK for Apple"
          "/usr/local/ndi"
          "/usr/local/lib/ndi"
          "$HOME/Library/NDI SDK for Apple"
          "$NDI_SDK_DIR"
        )
        
        FOUND_SDK=false
        for location in "${NDI_LOCATIONS[@]}"; do
          if [ -f "$location/include/Processing.NDI.Lib.h" ]; then
            echo "Found NDI SDK at: $location"
            if [ "$location" != "$NDI_SDK_DIR" ]; then
              echo "Creating symlinks from $location to $NDI_SDK_DIR"
              mkdir -p "$NDI_SDK_DIR"
              cp -R "$location"/* "$NDI_SDK_DIR/"
            fi
            FOUND_SDK=true
            break
          fi
        done
        
        if [ "$FOUND_SDK" = false ]; then
          echo "NDI SDK installation failed - header file not found in any expected location"
          echo "Searched locations:"
          for location in "${NDI_LOCATIONS[@]}"; do
            echo "  - $location"
            if [ -d "$location" ]; then
              echo "    Directory exists. Contents:"
              ls -la "$location" | head -10
              if [ -d "$location/include" ]; then
                echo "    Include directory contents:"
                ls -la "$location/include" | head -10
              fi
            else
              echo "    (directory not found)"
            fi
          done
          
          # Additional debugging
          echo ""
          echo "Searching for NDI files system-wide:"
          find /Library -name "*NDI*" -type d 2>/dev/null | head -20 || true
          find /Applications -name "*NDI*" -type d 2>/dev/null | head -20 || true
          find /usr/local -name "*NDI*" -type d 2>/dev/null | head -20 || true
          
          exit 1
        fi
        
        echo "✓ NDI SDK installed successfully"
        
        # Debug: Show what was actually installed
        echo ""
        echo "NDI SDK contents at $NDI_SDK_DIR:"
        ls -la "$NDI_SDK_DIR" || true
        if [ -d "$NDI_SDK_DIR/lib" ]; then
          echo ""
          echo "Library directory contents:"
          ls -la "$NDI_SDK_DIR/lib/" || true
          if [ -d "$NDI_SDK_DIR/lib/macOS" ]; then
            echo ""
            echo "macOS library directory contents:"
            ls -la "$NDI_SDK_DIR/lib/macOS/" || true
          fi
        fi
      shell: bash

    # Setup environment
    - name: Setup environment
      run: |
        NDI_SDK_DIR="${{ runner.temp }}/ndi-sdk"
        echo "NDI_SDK_DIR=$NDI_SDK_DIR" >> $GITHUB_ENV
        
        # Add binary paths if they exist
        [ -d "$NDI_SDK_DIR/bin" ] && echo "$NDI_SDK_DIR/bin" >> $GITHUB_PATH
        [ -d "$NDI_SDK_DIR/Bin" ] && echo "$NDI_SDK_DIR/Bin" >> $GITHUB_PATH
        
        # Set up library paths for macOS
        LIB_PATHS=""
        # Check for macOS-specific library subdirectory
        if [ -d "$NDI_SDK_DIR/lib/macOS" ]; then
          LIB_PATHS="$NDI_SDK_DIR/lib/macOS:$LIB_PATHS"
          echo "Found macOS library directory: $NDI_SDK_DIR/lib/macOS"
          ls -la "$NDI_SDK_DIR/lib/macOS/" | grep -E "\.(dylib|a)$" || true
        elif [ -d "$NDI_SDK_DIR/lib" ]; then
          LIB_PATHS="$NDI_SDK_DIR/lib:$LIB_PATHS"
          echo "Found library directory: $NDI_SDK_DIR/lib"
          ls -la "$NDI_SDK_DIR/lib/" | grep -E "\.(dylib|a)$" || true
        fi
        
        if [ -n "$LIB_PATHS" ]; then
          echo "DYLD_LIBRARY_PATH=${LIB_PATHS}${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> $GITHUB_ENV
        fi
        
        # Log the setup for debugging
        echo "NDI SDK setup complete. Environment:"
        echo "  NDI_SDK_DIR: $NDI_SDK_DIR"
        echo "  Binary paths added: $([ -d "$NDI_SDK_DIR/bin" ] && echo "$NDI_SDK_DIR/bin") $([ -d "$NDI_SDK_DIR/Bin" ] && echo "$NDI_SDK_DIR/Bin")"
        echo "  Library paths: $LIB_PATHS"
        
        # Verify NDI library can be found
        if [ -n "$LIB_PATHS" ]; then
          echo ""
          echo "Verifying NDI library files:"
          for path in $(echo $LIB_PATHS | tr ':' ' '); do
            if [ -d "$path" ]; then
              echo "  Checking $path:"
              ls -la "$path"/*.dylib 2>/dev/null || echo "    No .dylib files found"
              ls -la "$path"/*.a 2>/dev/null || echo "    No .a files found"
            fi
          done
        fi
      shell: bash

    # Save cache only from test-and-lint job on main branch
    - name: Save cache
      if: inputs.save-cache == 'true' && steps.cache-restore.outputs.cache-hit != 'true' && github.ref == 'refs/heads/main' && github.job == 'test-and-lint'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ runner.temp }}/ndi-sdk
        key: ${{ steps.cache-key.outputs.key }}